% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qap_run.R
\name{qap_run}
\alias{qap_run}
\title{Quadratic Assignment Procedure (\code{qap_run}).}
\usage{
qap_run(net, dependent = NULL, variables, directed = F, family = "linear")
}
\arguments{
\item{net}{An \code{igraph} or \code{network} object.}

\item{dependent}{A string naming the dependent variable of interest.}

\item{variables}{A vector of strings naming the independent variables of interest.}

\item{directed}{A logical statement identifying if the network should be treated as directed. Defaults to False.}

\item{family}{A string identifying the functional form. Options are "linear" and "binomial". Defauts to "linear".}
}
\value{
`qap_run` returns a list of elements \code{model_results} that include:

- \code{covs_df}, a data frame containing term labels, estimates, standard errors and p-values

- \code{mods_df}, a data frame containing model-level information including the number of observations, AIC and BIC statistics.
}
\description{
The \code{qap_run} function is a wrapper around \code{sna}'s Quadratic Assignment Procedure models \code{\link[sna:netlm]{sna::netlm}} and \code{\link[sna:netlogit]{sna::netlogit}}. It expects a networks objects containing dependent and independent variables of interest (e.g, the output from \code{\link{qap_setup}}).
}
\examples{
data("florentine", package = "ideanet")

 ideanet::netwrite(i_elements = florentine$node,
                   j_elements = florentine$target,
                   directed = FALSE,
                   net_name = "florentine_graph")

ideanet::qap_setup(florentine_graph, variables = c("total_degree"), methods = c("difference"))

ideanet::qap_run(qap_results[[1]], variables = c("diff_total_degree"))
}
