install.packages(c("knitr", "ps", "reprex", "yaml"))
devtools::install_github("Tom-Wolff/ideanet", build_vignettes = TRUE, force=TRUE)
# Install relevant packages if not already installed
if (!rlang::is_installed("tidyverse")) {install.packages("tidyverse")}
if (!rlang::is_installed("ggthemes")) {install.packages("ggthemes")}
# Load in libraries
library(igraph)
library(tidyverse)
library(ggthemes)
library(ggplot2)
library(reshape2)
igraph_version()
R.version
# Import relevant functions, below, will display a summary of all the .R files in CHAMP_Map_scripts directory
list.files("CHAMP_Map_scripts")
invisible(sapply(list.files("CHAMP_Map_scripts", pattern="\\.R$", full.names = TRUE),source))
# Find the relevant documentation
?cluster_leiden
library(igraphdata)
data(karate)
print(karate)
plot(karate, main="Karate Club Network")
#get_partitions <- function( network,
#                            gamma_range=c(0,2),
#                            n_runs=100,
#                            n_iterations=2, #parameter for cluster_leiden
#                            seed=NULL){
partitions <- get_partitions(karate, n_runs = 1000)
#CHAMP <- function( network,
#                   partitions,
#                   plottitle=NULL){
partition_summary <- CHAMP(karate,partitions,plottitle="Weighted Karate Club")
print(partition_summary)
#get_CHAMP_Map <- function( network,
#                           partitions,
#                           partition_summary,
#                           plottitle=NULL){
partition_summary <- get_CHAMP_Map(karate,partitions,partition_summary)
karate_unweighted<-karate
E(karate_unweighted)$weight<-1
partitions <- get_partitions(karate_unweighted)
partition_summary <- CHAMP(karate_unweighted,partitions,plottitle="Unweighted Karate Club")
print(partition_summary)
#get_CHAMP_Map <- function( network,
#                           partitions,
#                           partition_summary,
#                           plottitle=NULL){
partition_summary <- get_CHAMP_Map(karate_unweighted,partitions,partition_summary)
print(partition_summary)
list.files("data")
football <- read_graph("data/football.gml",format="gml")
print(football)
V(football)$label[V(football)$value==0]
E(football)$weight <- 1  #Because I haven't coded it correctly for unweighted networks
partitions <- get_partitions(football,gamma_range=c(0,6),n_runs=600)
partition_summary <- CHAMP(football,partitions,plottitle="NCAA Div-IA Football")
partition_summary <- get_CHAMP_Map(football,partitions,partition_summary)
print(partition_summary)
polblogs <- read_graph("data/polblogs.gml",format="gml")
print(polblogs)
polblogs.gc<-as.undirected(decompose(polblogs)[[1]])
print(polblogs.gc)
E(polblogs.gc)$weight <- 1  #Because I haven't coded it correctly for unweighted networks
partitions <- get_partitions(polblogs.gc,gamma_range=c(0,5),n_runs=1000,seed=43)
partition_summary <- CHAMP(polblogs.gc,partitions,plottitle="Adamic & Glance 2004 Political Blogs")
partition_summary <- get_CHAMP_Map(polblogs.gc,partitions,partition_summary)
print(partition_summary)
sizes(partitions$partitions[[10]])
table(V(polblogs.gc)$value+1,membership(partitions$partitions[[10]]))
sizes(partitions$partitions[[381]])
table(membership(partitions$partitions[[10]]),membership(partitions$partitions[[381]]))
plot(polblogs.gc,vertex.label=NA,vertex.color=V(polblogs.gc)$value+1,vertex.size=3)
list.files("data")
dolphins <- read_graph("data/dolphins.gml",format="gml")
print(dolphins)
# First, visualize the graph wihtout partitioning
plot(dolphins, main="NZ Dolphin Associations")
# Generate and plot partitions
E(dolphins)$weight <- 1  #Because I haven't coded it correctly for unweighted networks
partitions <- get_partitions(dolphins)
partition_summary <- CHAMP(dolphins,partitions,plottitle="NZ Dolphin Associations")
partition_summary <- get_CHAMP_Map(dolphins,partitions,partition_summary)
# Print with 6 partitions (might have to change index eaach time)
graph_to_plot <- partitions$partitions[[21]]
# Plot the graph
plot(graph_to_plot, dolphins, vertex.label=NA, plottitle="MCU Characters; 12 Partitions")
# Import relevant functions, below, will display a summary of all the .R files in directory
list.files("ideanet-main/R")
invisible(sapply(list.files("ideanet-main/R",full.names = TRUE),source))
# This is `netwrite` proper, as users encounter it. `netwrite` proper is effectively
# a wrapper for `basic_netwrite` that detects whether there's a multirelational
# edgelist present for which `basic_netwrite` needs to be applied to each relation type's
# respective subgraph
data("marvel", package = "ideanet")
ideanet::netwrite(i_elements = marvel$Source, j_elements = marvel$Target, weights = marvel$Weight, output="graph")
"marvel"
# Gives us the types of data that is produced
class(marvel)
marvel_graph <- graph_from_data_frame(marvel, directed = FALSE)
print(marvel_graph)
plot(marvel_graph,
vertex.label = NA,
vertex.size = 10,
main = "Marvel Character Network"
)
# Run our functions and display results
partitions <- get_partitions(marvel_graph)
partition_summary <- CHAMP(marvel_graph,partitions,plottitle="MCU Character Associations")
E(marvel_graph)$weight<-1
partition_summary <- get_CHAMP_Map(marvel_graph,partitions,partition_summary)
# Access the 12th partition
graph_to_plot <- partitions$partitions[[39]]  # Print with 12 partitions
# Plot the graph
plot(graph_to_plot, marvel_graph, vertex.label=NA, plottitle="MCU Characters; 12 Partitions")
# Get membership information, print characters in each partition
membership_info <- membership(graph_to_plot)
for (i in unique(membership_info)) {
cat("\nPartition", i, ":\n")
cat(names(V(marvel_graph))[membership_info == i], "\n")
}
?netwrite
?get_partitions
getwd()
setwd("~/Documents/GitHub/ideanet/R")
?get_partitions
??get_partitions
partitions
igraphdata::data(karate)
data(karate)
partitions <- get_partitions(karate, n_runs = 1000)
partitions <- get_partitions(karate, n_runs = 2500)
partitions <- get_partitions(karate, n_runs = 5000)
roxygen2::roxygenise(package.dir = "..")
?get_partitions]
?get_partitions
?get_partitions
roxygen2::roxygenise(package.dir = "..")
?get_partitions
?get_partitions
?str_unique
?get_partitions
roxygen2::roxygenise(package.dir = "..")
?get_partitions
roxygen2::roxygenise(package.dir = "..")
?get_partitions
?netwrite
example("get_partitions")
?browser
devtools::load_all("..")
?get_partitions
?netwrite
library(ideanet)
?netwrite
devtools::load_all(ideanet
)
devtools::load_all(ideanet)
devtools::load_all("ideanet")
devtools::load_all("..")
getwd()
devtools::load_all(".")
source("~/Documents/GitHub/ideanet/R/get_partitions.R", echo=TRUE)
?netwrite
devtools::load_all("..")
?netwrite
library(ideanet)
?netwrite
devtools::load_all("..")
?netwrite
setwd()
getwd()
setwd("~/Documents/GitHub/ideanet")
devtools::load_all("..")
devtools::load_all(".")
?netwrite
getwd()
?get_partitions
data(karate)
library(igraphdata)
data(karate)
partitions <- get_partitions(karate, n_runs = 2500)
