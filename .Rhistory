devtools::document()
rlang::last_error()
roxygen2::roxygenise()
devtools::document()
getwd()
getwd
getwd()
setwd("/Users/gabe/Documents/Projects/IDEAnet/ideanet")
getwd()
devtools::document()
?qap_setup()
devtools::document()
?qap_run()
devtools::document()
?qap_run()
?qap_run()
devtools::document()
?qap_run()
devtools::document()
?qap_run()
devtools::document()
?qap_setup()
install.packages("cliquepercolation")
install.packages("CliquePercolation")
install.packages("CliquePercolation")
library(CliquePercolation)
W <- matrix(c(0), nrow = 150, ncol = 150, byrow = TRUE)
name.vector <- paste(letters[rep(seq(from = 1, to = 26), each = 26)],
letters[seq(from = 1, to = 26)], sep = "")[1:nrow(W)]
rownames(W) <- name.vector
colnames(W) <- name.vector
set.seed(4186)
W[upper.tri(W)] <- sample(c(rep(0,6),1), length(W[upper.tri(W)]), replace = TRUE)
rand_w <- stats::rnorm(length(which(W == 1)), mean = 0.3, sd = 0.1)
W[which(W == 1)] <- rand_w
W <- Matrix::forceSymmetric(W)
W <- qgraph::qgraph(W, theme = "colorblind", layout = "spring", cut = 0.4)
library(qgraph)
install.packages("qgraph")
install.packages("qgraph")
library(qgraph)
library(Matrix)
W <- matrix(c(0), nrow = 150, ncol = 150, byrow = TRUE)
name.vector <- paste(letters[rep(seq(from = 1, to = 26), each = 26)],
letters[seq(from = 1, to = 26)], sep = "")[1:nrow(W)]
rownames(W) <- name.vector
colnames(W) <- name.vector
set.seed(4186)
W[upper.tri(W)] <- sample(c(rep(0,6),1), length(W[upper.tri(W)]), replace = TRUE)
rand_w <- stats::rnorm(length(which(W == 1)), mean = 0.3, sd = 0.1)
W[which(W == 1)] <- rand_w
W <- Matrix::forceSymmetric(W)
W <- qgraph::qgraph(W, theme = "colorblind", layout = "spring", cut = 0.4)
W
thresholds <- cpThreshold(W, method = "weighted", k.range = c(3,4),
I.range = c(seq(0.40, 0.01, by = -0.005)),
threshold = c("largest.components.ratio","chi"))
W <- matrix(c(0,1,1,1,0,0,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,1,1,0,
0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0), nrow = 10, ncol = 10, byrow = TRUE)
W <- forceSymmetric(W)
rownames(W) <- letters[seq(from = 1, to = nrow(W))]
colnames(W) <- letters[seq(from = 1, to = nrow(W))]
W <- qgraph(W, edge.width = 4)
W
thresholds.small <- cpThreshold(W, method = "unweighted", k.range = c(3,4),
threshold = "entropy")
cpk3I.35$list.of.communities.numbers
thresholds.small$list.of.communities.numbers
View(thresholds.small)
cpk3 <- cpAlgorithm(W, k = 3, method = "unweighted")
cpk3
cpk3$list.of.communities.numbers
cpk3$list.of.communities.labels
W <- matrix(c(0,1,1,1,0,0,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,1,1,0,
0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0), nrow = 10, ncol = 10, byrow = TRUE)
W <- forceSymmetric(W)
rownames(W) <- letters[seq(from = 1, to = nrow(W))]
colnames(W) <- letters[seq(from = 1, to = nrow(W))]
View(W)
W
?cpAlgorithm()
cpk3 <- cpAlgorithm(W, k = 4, method = "unweighted")
W <- matrix(c(0,1,1,1,0,0,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,1,1,0,
0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0), nrow = 10, ncol = 10, byrow = TRUE)
W <- forceSymmetric(W)
rownames(W) <- letters[seq(from = 1, to = nrow(W))]
colnames(W) <- letters[seq(from = 1, to = nrow(W))]
W <- qgraph(W, edge.width = 4)
cpk3 <- cpAlgorithm(W, k = 4, method = "unweighted")
cpk3$list.of.communities.labels
cpk3$list.of.communities.numbers
thresholds.small <- cpThreshold(W, method = "unweighted", k.range = c(3,4),
threshold = "entropy")
thresholds.small
thresholds.small
thresholds.small <- cpThreshold(W, method = "unweighted", k.range = c(3,4),
I.range = c(seq(0.40, 0.01, by = -0.005)),
threshold = c("largest.components.ratio","chi"))
thresholds.small
thresholds.small <- cpThreshold(W, method = "unweighted", k.range = c(3,4),
threshold = c("largest.components.ratio","chi"))
thresholds.small
library(tidyverse)
library(CliquePercolation)
library(qgraph)
library(Matrix)
W <- matrix(c(0,1,1,1,0,0,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,1,1,0,
0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0), nrow = 10, ncol = 10, byrow = TRUE)
W <- forceSymmetric(W)
rownames(W) <- letters[seq(from = 1, to = nrow(W))]
colnames(W) <- letters[seq(from = 1, to = nrow(W))]
W <- qgraph(W, edge.width = 4)
W <- matrix(c(0,1,1,1,0,0,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,1,1,0,
0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0), nrow = 10, ncol = 10, byrow = TRUE)
W
W <- matrix(c(0,1,1,1,0,0,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,1,1,0,
0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0), nrow = 10, ncol = 10, byrow = TRUE)
# W <- forceSymmetric(W)
rownames(W) <- letters[seq(from = 1, to = nrow(W))]
colnames(W) <- letters[seq(from = 1, to = nrow(W))]
qgraph(W, edge.width = 4)
W <- qgraph(W, edge.width = 4)
W
W <- matrix(c(0,1,1,1,0,0,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,1,1,0,
0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0), nrow = 10, ncol = 10, byrow = TRUE)
W <- forceSymmetric(W)
rownames(W) <- letters[seq(from = 1, to = nrow(W))]
colnames(W) <- letters[seq(from = 1, to = nrow(W))]
W <- qgraph(W, edge.width = 4)
thresholds.small <- cpThreshold(W, method = "unweighted", k.range = c(3,4),
threshold = "entropy")
thresholds.small
res1 <- cpk3$list.of.communities.labels
res2 <- cpk3$list.of.communities.numbers
unlist(res1)
res1
cpk3 <- cpAlgorithm(W, k = 3, method = "unweighted")
cpk3$list.of.communities.labels
cpk3$list.of.communities.numbers
res1 <- cpk3$list.of.communities.labels
res1
cpk3 <- cpAlgorithm(W, k = 3, method = "unweighted")
cpk3$list.of.communities.labels
cpk3$list.of.communities.numbers
unlist(res1)
as_data_frame(res1)
reduce(res1)
reduce(rbind, res1)
unnest(res1)
stack(res1)
res1
enframe(res1)
enframe(res1) %>% unnest(value)
res1 <- enframe(cpk3$list.of.communities.labels) %>% unnest(value)
res1
enframe(cpk3$list.of.communities.labels) %>% unnest(value)
enframe(cpk3$list.of.communities.numbers) %>% unnest(value)
W
qgraph(W, edge.width = 4)
install.packages("linkcomm")
library(linkcomm)
net <- karate
net
getLinkCommunities(karate, hcmethod = "single")
lc <- getLinkCommunities(karate, hcmethod = "single")
print(lc)
View(lc)
lc$igraph
View(lc)
lc$nodeclusters
lc$nodeclusters %>% distinct(node)
lc$nodeclusters
lc$nodeclusters %>% arrange(node)
lc <- getLinkCommunities(karate, hcmethod = "average")
print(lc)
lc$nodeclusters %>% arrange(node)
View(lc)
lc$edgelist
lc$edges
?getLinkCommunities
net <- pp_rnapol
net
net <- human_pp
net
lc <- getLinkCommunities(karate, hcmethod = "average")
lc$edges
lc$nodeclusters
lc$nodeclusters %>% group_by(node) %>% summarise(cluster)
lc$nodeclusters
lc$nodeclusters %>% count(cluster)
clust_size <- lc$nodeclusters %>% count(cluster)
clust_size
lc$nodeclusters
lc$nodeclusters %>% left_join(cluster_size, by = "cluster")
lc$nodeclusters %>% left_join(clust_size, by = "cluster")
lc$nodeclusters %>% left_join(clust_size, by = "cluster") %>% group_by(node) %>% slice(which.max(n))
karate_w$weight
karate$weight <- runif(length(karate), min=0, max=1)
karate
karate$weight <- runif(nrow(karate), min=0, max=1)
karate
lc <- getLinkCommunities(karate, hcmethod = "average", directed = T)
clust_size <- lc$nodeclusters %>% count(cluster)
lc$nodeclusters %>% left_join(clust_size, by = "cluster") %>% group_by(node) %>% slice(which.max(n))
clust_size
lc
lc$nodeclusters %>% left_join(clust_size, by = "cluster") %>% group_by(node) %>% slice(which.max(n))
clust_size <- lc$nodeclusters %>% count(cluster)
cluster_assignment <- lc$nodeclusters %>% left_join(clust_size, by = "cluster") %>% group_by(node) %>% slice(which.max(n)) %>% select(-n)
cluster_assignment
print(lc)
lc <- getLinkCommunities(karate, hcmethod = "average", directed = f)
lc <- getLinkCommunities(karate, hcmethod = "average", directed = F)
print(lc)
clust_size <- lc$nodeclusters %>% count(cluster)
cluster_assignment <- lc$nodeclusters %>% left_join(clust_size, by = "cluster") %>% group_by(node) %>% slice(which.max(n)) %>% select(-n)
cluster_assignment
library(linkcomm)
karate
library(tidyverse)
library(CliquePercolation)
library(qgraph)
library(Matrix)
library(linkcomm)
lc <- getLinkCommunities(karate, hcmethod = "average", directed = F, dirweight)
lc <- getLinkCommunities(karate, hcmethod = "average", directed = F)
karate
clust_size <- lc$nodeclusters %>% count(cluster)
cluster_assignment <- lc$nodeclusters %>% left_join(clust_size, by = "cluster") %>% group_by(node) %>% slice(which.max(n)) %>% select(-n)
cluster_assignment
karate_w <- karate
karate_w$weight <- runif(nrow(karate_w), min=0, max=1)
karate_w
lc <- getLinkCommunities(karate_w, hcmethod = "average", directed = F, dirweight = 0.5)
clust_size
lc
lc$nodeclusters
View(lc)
lc$numbers
lc$hclust
lc$pdmax
lc$pdens
lc$nodeclusters
lc$clusters
lc$edges
lc$numclusters
lc$clustsizes
lc$igraph
lc$edgelist
lc$dendr
cpk3 <- cpAlgorithm(W, method = "unweighted")
W <- matrix(c(0,1,1,1,0,0,0,0,0,0,
0,0,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,1,1,0,
0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0), nrow = 10, ncol = 10, byrow = TRUE)
# W <- forceSymmetric(W)
rownames(W) <- letters[seq(from = 1, to = nrow(W))]
colnames(W) <- letters[seq(from = 1, to = nrow(W))]
W <- qgraph(W, edge.width = 4)
cpk3 <- cpAlgorithm(W, method = "unweighted")
karate_w
lc <- getLinkCommunities(karate_w, hcmethod = "average", directed = F, dirweight = 0.5)
lc$edges
karate_w
lc$edges
karate_w
lc$edges %>% left_join(karate_w, by = c("node1" = "V1", "node2" = "V2"))
karate_w
lc$edges
lc$edges %>% left_join(karate_w %>% mutate_at(c("V1", "V2"), as.character), by = c("node1" = "V1", "node2" = "V2"))
res_edge <- lc$edges %>% left_join(karate_w %>% mutate_at(c("V1", "V2"), as.character), by = c("node1" = "V1", "node2" = "V2"))
res_edge
res_edge %>% select(-node2, node = node1, cluster, weight)
res_edge2 <- res_edge %>% select(-node1, node = node2, cluster, weight)
res_edge <- rbind(res_edge1, res_edge2)
res_edge1 <- res_edge %>% select(-node2, node = node1, cluster, weight)
res_edge2 <- res_edge %>% select(-node1, node = node2, cluster, weight)
res_edge <- rbind(res_edge1, res_edge2)
res_edge
rbind(res_edge1, res_edge2) %>% distinct(node_cluster)
rbind(res_edge1, res_edge2)
rbind(res_edge1, res_edge2) %>% distinct(node, cluster)
rbind(res_edge1, res_edge2)
lc$nodeclusters
rbind(res_edge1, res_edge2) %>% group_by(node, cluster) %>% summarise(weight)
rbind(res_edge1, res_edge2) %>% group_by(node, cluster) %>% summarise(weight = mean(weight))
res_edge <- rbind(res_edge1, res_edge2) %>% group_by(node, cluster) %>% summarise(weight = mean(weight)) %>% ungroup()
res_edge
res_edge <- rbind(res_edge1, res_edge2) %>% group_by(node, cluster) %>% summarise(weight = mean(weight))
res_edge %>% slice(which.max(weight))
