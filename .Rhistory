edges = marvel
directed = F
weights = marvel$weight
netname = "marvel"
type = NULL
nodes = NULL
if (is.null(weights) & data_type == "edgelist") {edges$weights <- 1}
if (is.null(type) & data_type == "edgelist") {edges$type <- 1}
if ("attr" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = attr)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
# Create igraph objects
if (data_type == "edgelist") {
if (is.data.frame(nodes)) {net <- graph_from_data_frame(edges, vertices = nodes, directed = directed) # with nodes
} else {net <- graph_from_data_frame(edges, directed = directed)} # without nodes
}
if (data_type == "adjacency_matrix") {net <- graph_from_adjacency_matrix(edges)} # adjacency matrix
tnet::clustering_w(net)
library(tnet)
edges
tnet <- as.tnet(edges %>% select(-type))
unique_names <- unique(c(edges$from, edges$to))
name_to_id <- setNames(1:length(unique_names), unique_names)
name_to_id
edges$from_id <- name_to_id[edges$from]
edges$to_id <- name_to_id[edges$to]
View(edges)
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
data_type = "edgelist"
edges = marvel
directed = F
weights = marvel$weight
netname = "marvel"
unique_names <- unique(c(edges$from, edges$to))
name_to_id <- setNames(1:length(unique_names), unique_names)
edges$from <- name_to_id[edges$from]
edges$to <- name_to_id[edges$to]
edges
tnet <- as.tnet(edges %>% select(-type))
View(tnet)
rm(list= setdiff(ls(), c("path")))
source(paste0(path, "/comparison_script.R"))
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
comparison_f(data_type = "edgelist", edges = marvel, directed = F, weights = marvel$weight, netname = "marvel")
data_type = "edgelist"
edges = marvel
library(tnet)
unique_names <- unique(c(edges$from, edges$to))
name_to_id <- setNames(1:length(unique_names), unique_names)
edges$from <- name_to_id[edges$from]
edges$to <- name_to_id[edges$to]
tnet <- as.tnet(edges %>% select(-type))
unique_names <- unique(c(edges$from, edges$to))
name_to_id <- setNames(1:length(unique_names), unique_names)
edges$from <- name_to_id[edges$from]
edges$to <- name_to_id[edges$to]
tnet <- as.tnet(edges)
tnet::clustering_w(tnet)
tnet::betweenness_w(tnet, alpha = 1)
bet1 <- tnet::betweenness_w(tnet, alpha = 0.5)
bet1
bet1 <- tnet::betweenness_w(tnet)
bet1
write.csv(bet1, "bet_tnet.csv")
source(paste0(path, "/comparison_script.R"))
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
comparison_f(data_type = "edgelist", edges = marvel, directed = F, weights = marvel$weight, netname = "marvel")
cent1 <- tnet:closeness_w(tnet, alpha = 1)
cent1
tnet:closeness_w(tnet, alpha = 1)
rm(list= setdiff(ls(), c("path")))
source(paste0(path, "/comparison_script.R"))
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
comparison_f(data_type = "edgelist", edges = marvel, directed = F, weights = marvel$weight, netname = "marvel")
data_type = "edgelist"
edges = marvel
directed = F
weights = marvel$weight
netname = "marvel"
nodes = NULL
if (is.null(weights) & data_type == "edgelist") {edges$weights <- 1}
if (is.null(type) & data_type == "edgelist") {edges$type <- 1}
type = NULL
if (is.null(weights) & data_type == "edgelist") {edges$weights <- 1}
if (is.null(type) & data_type == "edgelist") {edges$type <- 1}
if ("attr" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = attr)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
# Create igraph objects
if (data_type == "edgelist") {
if (is.data.frame(nodes)) {net <- graph_from_data_frame(edges, vertices = nodes, directed = directed) # with nodes
} else {net <- graph_from_data_frame(edges, directed = directed)} # without nodes
}
if (data_type == "adjacency_matrix") {net <- graph_from_adjacency_matrix(edges)} # adjacency matrix
## Node measures ##
# Always measured
V(net)$total_degree <- igraph::degree(net, mode='all', loops=FALSE)
V(net)$eigen_centrality <- igraph::eigen_centrality(net, directed = directed, weights = weights)$vector
V(net)$bonpow <- igraph::power_centrality(net, exponent = 0.75)
V(net)$bonpow_negative <- igraph::power_centrality(net, exponent = -0.75)
V(net)$betweenness <- igraph::centr_betw(net, directed = directed)$res
V(net)$burt_constraint <- igraph::constraint(net, weights = weights)
V(net)$burt_hierarchy <- as.vector(manynet::node_hierarchy(net))
V(net)$effective_size <- as.vector(manynet::node_effsize(net))
net
igraph::closeness(net, normalized = T)
igraph::closeness(as.undirected(net), normalized = T)
net
saveRDS(net, "net.rds")
igraph::closeness(net, normalized = T)
library(igraph)
library(readxl)
library(ggplot2)
setwd("/Users/gabe/Downloads")
#check:
getwd()
g <- read_graph(file.choose(), format = "marvel1.net")
g
getwd()
?read_graph
g <- read_graph("/Users/gabe/Downloads/marvel1.net", format = "pajek")
g
net
g <-as.undirected(g, mode = "collapse")
net
g
betweenness(g,normalize=T)
igraph::closeness(net, normalized = T)
1/E(net)$weight
E(net)$weight <- 1/E(net)$weight
igraph::closeness(net, normalized = T)
E(net)$weight <- 1/E(net)$weight
V(net)$closeness <- igraph::closeness(net, normalized = T)
closecent_g0<-closeness(g2,normalize=T)
g2<-g
E(g2)$weight<-(1/E(g2)$weight)
closecent_g0<-closeness(g2,normalize=T)
closecent_g0
as.data.frame(closecent_g0)
as.data.frame(V(net)$closeness)
as_data_frame(net, what = "nodes")
as_data_frame(net, what = "vertices")
as_data_frame(net, what = "vertices") %>% select(name, closeness)
df1 <- as.data.frame(closecent_g0)
df2 <- as_data_frame(net, what = "vertices") %>% select(name, closeness)
View(df1)
df1 <- as.data.frame(closecent_g0) %>% tibble::rownames_to_column(var = "name")
df1
left_join(df2, df1, by = c("name"))
View(df1)
df1 <- as.data.frame(closecent_g0) %>% tibble::rownames_to_column(var = "name")
View(df1)
df2 <- as_data_frame(net, what = "vertices") %>% select(name, closeness)
View(df2)
df1 <- as.data.frame(closecent_g0) %>% tibble::rownames_to_column(var = "name")
df2 <- as_data_frame(net, what = "vertices") %>% select(name, closeness)
rownames(df2) <- NULL
View(df1)
View(df2)
left_join(df2, df1, by = "name")
df1 %>% pull(name)
df2 %>% pull(name)
df1$name <- trimws(df1$name)
df1 %>% pull(name)
left_join(df2, df1, by = "name")
igraph::closeness(net, normalized = T)
E(net)$weight <- 1/E(net)$weight
igraph::closeness(net, normalized = T)
V(net)$closeness <- igraph::closeness(net, normalized = T)
df1 <- as.data.frame(closecent_g0) %>% tibble::rownames_to_column(var = "name")
df1$name <- trimws(df1$name)
df2 <- as_data_frame(net, what = "vertices") %>% select(name, closeness)
rownames(df2) <- NULL
left_join(df2, df1, by = "name")
View(node_measures)
net
g
igraph::closeness(g2,normalize=T)
View(node_measures)
df3 <- node_measures %>% select(original_id, closeness_ideanet = closeness)
View(df3)
df3 %>% pull(original_id)
df3 <- node_measures %>% select(name = original_id, closeness_ideanet = closeness)
final_df <- left_join(df2, df1, by = "name")
final_df <- left_join(final_df, df3, by = "name")
View(final_df)
g
net
igraph::closeness(g, normalized = T)
igraph::closeness(g2, normalized = T)
igraph::closeness(g, normalized = T)
igraph::closeness(g2, normalized = T)
igraph::closeness(net, normalized = T)
build()
devtools::build()
systemfonts::system_fonts() |> View()
devtools::build()
packageVersion("igraph")
library(ideanet)
ideanet::ideanetViz()
edges <- read.csv("/Users/gabe/Downloads/poetry-little-review-edges.csv")
nodes <- read.csv("/Users/gabe/Downloads/poetry-little-review-nodes.csv")
res <- netwrite(i_elements = edges$Source, j_elements = edges$Target, weights = edges$Weight, directed = F)
edges <- read.csv("/Users/gabe/Downloads/poetry-little-review-edges.csv")
nodes <- read.csv("/Users/gabe/Downloads/poetry-little-review-nodes.csv")
res <- netwrite(i_elements = edges$Source, j_elements = edges$Target, weights = edges$Weight, directed = F)
res <- ideanet::netwrite(i_elements = edges$Source, j_elements = edges$Target, weights = edges$Weight, directed = F)
res$system_measure_plot
res$node_measure_plot
install_github("Tom-Wolff/ideanet")
install_github("Tom-Wolff/ideanet")
??install_github
remotes::install_github("Tom-Wolff/ideanet")
library(ideanet)
edges <- read.csv("/Users/gabe/Downloads/poetry-little-review-edges.csv")
nodes <- read.csv("/Users/gabe/Downloads/poetry-little-review-nodes.csv")
res <- ideanet::netwrite(i_elements = edges$Source, j_elements = edges$Target, weights = edges$Weight, directed = F)
res$system_measure_plot
res$node_measure_plot
library(ideanet)
remotes::install_github("Tom-Wolff/ideanet")
library(ideanet)
edges <- read.csv("/Users/gabe/Downloads/poetry-little-review-edges.csv")
nodes <- read.csv("/Users/gabe/Downloads/poetry-little-review-nodes.csv")
res <- ideanet::netwrite(i_elements = edges$Source, j_elements = edges$Target, weights = edges$Weight, directed = F)
res$system_measure_plot
res$node_measure_plot
ideanet::ideanetViz()
ideanet::ideanetViz()
ideanet::ideanetViz()
ideanet::ideanetViz()
ideanet::ideanetViz()
res$network
qap_setup(res$network, c("total_degree"), methods = c("difference"))
qap_res <- qap_setup(res$network, c("total_degree"), methods = c("difference"))
qap_res$edges
qap_res$edges$diff_total_degree
qap_res$graph
?qap_run()
qap_run(qap_res$graph, dependent = "abs_diff_total_degree", variables = c("total_degree", "eigen_centrality"))
qap_run(qap_res$graph, dependent = NULL, variables = c("abs_diff_total_degree"))
qap_res <- qap_setup(res$network)
qap_setup <- function(net, variables = NULL, methods = NULL, directed = FALSE, additional_vars = NULL) {
### CONSTRUCTING NODE AND EDGE LISTS ###
# Make sure it's an igraph object
if ("network" %in% class(net)) {
net <- intergraph::asIgraph(net)
}
# Create nodelist, checking for an "id" column
if (!("id" %in% igraph::vertex_attr_names(net))) {
nodes <- igraph::as_data_frame(net, what = "vertices") %>%
tibble::rownames_to_column(var = "id") %>%
dplyr::mutate(id = as.numeric(.data$id))
} else {
nodes <- igraph::as_data_frame(net, what = "vertices") %>%
dplyr::mutate(id = as.numeric(.data$id))
}
# Create edgelist
edges <- igraph::as_data_frame(net, what = "edges") %>%
dplyr::mutate_at(dplyr::vars(.data$from, .data$to), as.numeric)
# Check if additional_vars was called
if (!is.null(additional_vars)) {
vec1 <- nodes$id
# Check if the called ego df has an id column or a label column
tryCatch(vec2 <- additional_vars$id,
warning = function(e)
tryCatch(vec2 <- additional_vars$label,
warning = function(e)
stop("Make sure your additional ego dataframe contains an id or label variable")))
# Check if the two ids are identical
if (identical(vec1, vec2) == F) {
error_m <- paste0("Make sure the id or label of the additional ego dataframe match model ids exactly.
There are ", length(vec1), " ids in the model and ", length(vec2), " ids in the additional
dataframe, of which ", length(intersect(vec1, vec2)), " intersect.")
stop(error_m)
}
# Merge if all tests are passed
nodes <- nodes %>% dplyr::left_join(additional_vars)
}
### CONSTRUCTING DYAD MEASURES FROM EGO MEASURES ###
# check if there are as many variables as methods
if ((length(variables) == length(methods)) == F) {
stop("Different number of variables and methods")
}
# loop over user defined variables
for (i in 1:length(variables)) {
variable <- variables[i]
method <- methods[i]
# Check (1) if variable in in nodelist (2) if variable NOT in edgelist (3) if transformed variable in edgelist. If False, skip.
if (variable %in% names(nodes) & !(variable %in% names(edges)) & !(!!paste0(variable, "_ego") %in% names(edges))) {
# Add each value with _ego or _alter suffix to edge dataframe
edges <- edges %>%
dplyr::left_join(nodes %>% dplyr::select(.data$id, tidyselect::all_of(variable)), by = c("from" = "id")) %>%
dplyr::rename(!!paste0(variable, "_ego") := variable) %>%
dplyr::left_join(nodes %>% dplyr::select(.data$id, tidyselect::all_of(variable)), by = c("to" = "id")) %>%
dplyr::rename(!!paste0(variable, "_alter") := variable)
# If method "reduced_category", create simple dichotomy
if (method == "reduced_category") {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("same_", variable))) :=
dplyr::case_when(!!rlang::sym(paste0(variable, "_alter")) ==
!!rlang::sym(paste0(variable, "_ego")) ~ 1,
is.na(!!rlang::sym(paste0(variable, "_ego"))) |
is.na(!!rlang::sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
# If method "multi_category", create an tidyselect::all_of(variable) for each value and then dichotomize.
if (method == "multi_category") {
opts <- nodes %>% dplyr::select(tidyselect::all_of(variable)) %>% dplyr::distinct() %>% tidyr::drop_na() %>% dplyr::pull()
for (n in 1:length(opts)) {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("both_", variable, "_", opts[n]))) :=
dplyr::case_when((!!rlang::sym(paste0(variable, "_alter")) == opts[n]) &
(!!rlang::sym(paste0(variable, "_ego")) == opts[n]) ~ 1,
is.na(!!rlang::sym(paste0(variable, "_ego"))) |
is.na(!!rlang::sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
}
# If method "difference", take the difference between ego and alter
if (method == "difference") {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("diff_", variable))) :=
as.numeric(!!rlang::sym(paste0(variable, "_ego"))) -
as.numeric(!!rlang::sym(paste0(variable, "_alter"))),
!!rlang::sym((paste0("abs_diff_", variable))) :=
abs(as.numeric(!!rlang::sym(paste0(variable, "_ego"))) -
as.numeric(!!rlang::sym(paste0(variable, "_alter")))))
}
# If diff is "both", run both reduced and multi categories.
if (method == "both") {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("same_", variable))) :=
dplyr::case_when(!!rlang::sym(paste0(variable, "_alter")) ==
!!rlang::sym(paste0(variable, "_ego")) ~ 1,
is.na(!!rlang::sym(paste0(variable, "_ego"))) |
is.na(!!rlang::sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
opts <- nodes %>% dplyr::select(tidyselect::all_of(variable)) %>% dplyr::distinct() %>% tidyr::drop_na() %>% dplyr::pull()
for (n in 1:length(opts)) {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("both_", variable, "_", opts[n]))) :=
dplyr::case_when((!!rlang::sym(paste0(variable, "_alter")) == opts[n]) &
(!!rlang::sym(paste0(variable, "_ego")) == opts[n]) ~ 1,
is.na(!!rlang::sym(paste0(variable, "_ego"))) |
is.na(!!rlang::sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
}
}
}
qap_graph <- igraph::graph_from_data_frame(edges, directed = directed, vertices = nodes)
qap_results <- list(graph = qap_graph, nodes = nodes, edges = edges)
return(qap_results)
# assign("qap_results", qap_results, .GlobalEnv)
}
qap_res <- qap_setup(res$network)
qap_setup <- function(net, variables = NULL, methods = NULL, directed = FALSE, additional_vars = NULL) {
if (is.null(variables) | is.null(methods)) {
stop("Variable or Methods is empty. Both must be of equal length.")
}
### CONSTRUCTING NODE AND EDGE LISTS ###
# Make sure it's an igraph object
if ("network" %in% class(net)) {
net <- intergraph::asIgraph(net)
}
# Create nodelist, checking for an "id" column
if (!("id" %in% igraph::vertex_attr_names(net))) {
nodes <- igraph::as_data_frame(net, what = "vertices") %>%
tibble::rownames_to_column(var = "id") %>%
dplyr::mutate(id = as.numeric(.data$id))
} else {
nodes <- igraph::as_data_frame(net, what = "vertices") %>%
dplyr::mutate(id = as.numeric(.data$id))
}
# Create edgelist
edges <- igraph::as_data_frame(net, what = "edges") %>%
dplyr::mutate_at(dplyr::vars(.data$from, .data$to), as.numeric)
# Check if additional_vars was called
if (!is.null(additional_vars)) {
vec1 <- nodes$id
# Check if the called ego df has an id column or a label column
tryCatch(vec2 <- additional_vars$id,
warning = function(e)
tryCatch(vec2 <- additional_vars$label,
warning = function(e)
stop("Make sure your additional ego dataframe contains an id or label variable")))
# Check if the two ids are identical
if (identical(vec1, vec2) == F) {
error_m <- paste0("Make sure the id or label of the additional ego dataframe match model ids exactly.
There are ", length(vec1), " ids in the model and ", length(vec2), " ids in the additional
dataframe, of which ", length(intersect(vec1, vec2)), " intersect.")
stop(error_m)
}
# Merge if all tests are passed
nodes <- nodes %>% dplyr::left_join(additional_vars)
}
### CONSTRUCTING DYAD MEASURES FROM EGO MEASURES ###
# check if there are as many variables as methods
if ((length(variables) == length(methods)) == F) {
stop("Different number of variables and methods")
}
# loop over user defined variables
for (i in 1:length(variables)) {
variable <- variables[i]
method <- methods[i]
# Check (1) if variable in in nodelist (2) if variable NOT in edgelist (3) if transformed variable in edgelist. If False, skip.
if (variable %in% names(nodes) & !(variable %in% names(edges)) & !(!!paste0(variable, "_ego") %in% names(edges))) {
# Add each value with _ego or _alter suffix to edge dataframe
edges <- edges %>%
dplyr::left_join(nodes %>% dplyr::select(.data$id, tidyselect::all_of(variable)), by = c("from" = "id")) %>%
dplyr::rename(!!paste0(variable, "_ego") := variable) %>%
dplyr::left_join(nodes %>% dplyr::select(.data$id, tidyselect::all_of(variable)), by = c("to" = "id")) %>%
dplyr::rename(!!paste0(variable, "_alter") := variable)
# If method "reduced_category", create simple dichotomy
if (method == "reduced_category") {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("same_", variable))) :=
dplyr::case_when(!!rlang::sym(paste0(variable, "_alter")) ==
!!rlang::sym(paste0(variable, "_ego")) ~ 1,
is.na(!!rlang::sym(paste0(variable, "_ego"))) |
is.na(!!rlang::sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
# If method "multi_category", create an tidyselect::all_of(variable) for each value and then dichotomize.
if (method == "multi_category") {
opts <- nodes %>% dplyr::select(tidyselect::all_of(variable)) %>% dplyr::distinct() %>% tidyr::drop_na() %>% dplyr::pull()
for (n in 1:length(opts)) {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("both_", variable, "_", opts[n]))) :=
dplyr::case_when((!!rlang::sym(paste0(variable, "_alter")) == opts[n]) &
(!!rlang::sym(paste0(variable, "_ego")) == opts[n]) ~ 1,
is.na(!!rlang::sym(paste0(variable, "_ego"))) |
is.na(!!rlang::sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
}
# If method "difference", take the difference between ego and alter
if (method == "difference") {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("diff_", variable))) :=
as.numeric(!!rlang::sym(paste0(variable, "_ego"))) -
as.numeric(!!rlang::sym(paste0(variable, "_alter"))),
!!rlang::sym((paste0("abs_diff_", variable))) :=
abs(as.numeric(!!rlang::sym(paste0(variable, "_ego"))) -
as.numeric(!!rlang::sym(paste0(variable, "_alter")))))
}
# If diff is "both", run both reduced and multi categories.
if (method == "both") {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("same_", variable))) :=
dplyr::case_when(!!rlang::sym(paste0(variable, "_alter")) ==
!!rlang::sym(paste0(variable, "_ego")) ~ 1,
is.na(!!rlang::sym(paste0(variable, "_ego"))) |
is.na(!!rlang::sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
opts <- nodes %>% dplyr::select(tidyselect::all_of(variable)) %>% dplyr::distinct() %>% tidyr::drop_na() %>% dplyr::pull()
for (n in 1:length(opts)) {
edges <- edges %>%
dplyr::mutate(!!rlang::sym((paste0("both_", variable, "_", opts[n]))) :=
dplyr::case_when((!!rlang::sym(paste0(variable, "_alter")) == opts[n]) &
(!!rlang::sym(paste0(variable, "_ego")) == opts[n]) ~ 1,
is.na(!!rlang::sym(paste0(variable, "_ego"))) |
is.na(!!rlang::sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
}
}
}
qap_graph <- igraph::graph_from_data_frame(edges, directed = directed, vertices = nodes)
qap_results <- list(graph = qap_graph, nodes = nodes, edges = edges)
return(qap_results)
# assign("qap_results", qap_results, .GlobalEnv)
}
qap_res <- qap_setup(res$network)
ideanet::ideanetViz()
remotes::install_github("Tom-Wolff/ideanet")
idea
ideanetViz()
runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
remotes::install_github("Tom-Wolff/ideanet")
library(ideanet)
library(ideanet)
ideanetViz()
remotes::install_github("Tom-Wolff/ideanet")
ideanetViz()
remotes::install_github("Tom-Wolff/ideanet", force = T)
library(ideanet)
remotes::install_github("Tom-Wolff/ideanet", force = T)
library(ideanet)
ideanetViz()
