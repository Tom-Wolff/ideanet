ideanet::marvel
df <- ideanet::marvel
ideanet::netwrite(i_elements = df$Source, j_elements = df$Target,
weights = df$Weight)
ideanet::communities(network)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev")
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev", force = T)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev", force = T)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev", force = T)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev", force = T)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
shiny::runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
library(ideanet)
runApp('inst/apps/ideanetViz')
library(dplyr)
library(tidyverse)
library(ggplot2)
df <- read_csv("/Users/gabe/Downloads/test_in.csv")
length(unique(df$total_degree))
table(df$total_degree)
data.frame(table(df$total_degree))
dat
dat <- data.frame(table(df$total_degree))
dat
ggplot(dat, aes(x = Var1, y = Freq)) +
geom_col()
shiny::runApp('inst/apps/ideanetViz')
library(ideanet)
runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
library(ideanet)
vignette("ego_netwrite", package = "ideanet")
vignette(package = "ideanet")
tools::getVignetteInfo("ideanet")
nc_read("/Users/gabe/Downloads/networkCanvasExport-1713720198105-2 2")
res <- ideanet::nc_read("/Users/gabe/Downloads/networkCanvasExport-1713720198105-2 2")
res$egos
res$egos
res$egos %>% select(name, email)
res$egos dplyr::%>% select(name, email)
res$egos
res$egos["ego.name"]
res$egos[c("ego.name", "email")]
res <- ideanet::nc_read("/Users/gabe/Downloads/networkCanvasExport-1713720198105-2 2")
res$egos
res$egos[c("ego.name", "email")]
res <- res$egos[c("ego.name", "email")]
emails <- readxl::read_excel("/Users/gabe/Documents/Projects/Egonets_survey/advertising/emails.xlsx")
emails
library(dplyr)
emails
res$email
emails %>% mutate(Completed = case_when(Email %in% res$email ~ 1, T ~ NA_real_))
emails
emails %>%
mutate(Email = tolower(Email)) %>%
mutate(Completed = case_when(Email %in% res$email ~ 1, T ~ NA_real_))
res
res$email <- tolower(res$email)
emails %>%
mutate(Email = tolower(Email)) %>%
mutate(Completed = case_when(Email %in% res$email ~ 1, T ~ NA_real_))
emails <- emails %>%
mutate(Email = tolower(Email)) %>%
mutate(Completed = case_when(Email %in% res$email ~ 1, T ~ NA_real_))
write.csv(emails, "emails_comp.csv")
emails
res
emails
res %>% mutate(found = case_when(email %in% emails$Email))
res %>% mutate(found = case_when(email %in% emails$Email ~ 1, T ~ 0))
res %>% mutate(found = case_when(email %in% emails$Email ~ 1, T ~ 0)) %>% filter(found == 0)
library(statnet)
library(dplyr)
library(ideanet)
fx_edges <- ideanet::fauxmesa_edges
fx_nodes <- ideanet::fauxmesa_nodes %>% mutate(race_t = race)
el <- cbind(a=fx_edges$from, b=fx_edges$to)
fx_edges_mat <- matrix(0, nrow(fx_edges), nrow(fx_nodes))
fx_edges_mat[el] <- 1 # edgelist
fx_att_list <- as.list(fx_nodes)
fx_net <- network::network(x = fx_edges, directed = T,
vertex.attr = fx_nodes)
fx_net2 <- igraph::graph_from_data_frame(fx_edges, vertices = fx_nodes, directed = T)
unique_ids <- unique(c(unique(fx_edges$from), unique(fx_edges$to)))
fx_nodes <- fx_nodes %>% filter(id %in% unique_ids)
fx_nodes$both_race_white <- ifelse(fx_nodes$race == "White", 1, 0)
both_white <- outer(fx_nodes$both_race_white, fx_nodes$both_race_white,  "==")
both_white <- as.matrix(both_white)
samesex <- outer(fx_nodes$sex, fx_nodes$sex,  "==")
samesex <- as.matrix(samesex)
samerace <- outer(fx_nodes$race, fx_nodes$race, "==")
samerace <- as.matrix(samerace)
diffgrade <- outer(fx_nodes$grade, fx_nodes$grade, "-")
diffgrade <- as.matrix(diffgrade)
diffgrade_abs <- abs(as.matrix(diffgrade))
adjmat <- as.matrix(fx_net)
diag(fx_net)
fx_net
diag(adjmat)
diffgrade
samesex <- outer(fx_nodes$sex, fx_nodes$sex,  "==")
samesex <- as.matrix(samesex)
diag(samesex) <- NA
samerace <- outer(fx_nodes$race, fx_nodes$race, "==")
samerace <- as.matrix(samerace)
diag(samerace) <- NA
diffgrade <- outer(fx_nodes$grade, fx_nodes$grade, "-")
diffgrade <- as.matrix(diffgrade)
diag(diffgrade) <- NA
diffgrade_abs <- abs(as.matrix(diffgrade))
diag(adjmat) <- NA
adj_lt <- adjmat[lower.tri(adjmat)]
both_white_lt <- both_white[lower.tri(both_white)]
samesex_lt <- samesex[lower.tri(samesex)]
samerace_lt <- samerace[lower.tri(samerace)]
diffgrade_lt <- diffgrade[lower.tri(diffgrade)]
dmat <- as.data.frame(cbind(c(adjmat), c(both_white), c(samesex), c(samerace), abs(c(diffgrade)), c(diffgrade)))
fx_edges <- ideanet::fauxmesa_edges
fx_nodes <- ideanet::fauxmesa_nodes %>% mutate(race_t = race)
el <- cbind(a=fx_edges$from, b=fx_edges$to)
fx_edges_mat <- matrix(0, nrow(fx_edges), nrow(fx_nodes))
fx_edges_mat[el] <- 1 # edgelist
fx_att_list <- as.list(fx_nodes)
fx_net <- network::network(x = fx_edges, directed = T,
vertex.attr = fx_nodes)
fx_net2 <- igraph::graph_from_data_frame(fx_edges, vertices = fx_nodes, directed = T)
unique_ids <- unique(c(unique(fx_edges$from), unique(fx_edges$to)))
fx_nodes <- fx_nodes %>% filter(id %in% unique_ids)
fx_nodes$both_race_white <- ifelse(fx_nodes$race == "White", 1, 0)
both_white <- outer(fx_nodes$both_race_white, fx_nodes$both_race_white,  "==")
both_white <- as.matrix(both_white)
diag(both_white) <- NA
samesex <- outer(fx_nodes$sex, fx_nodes$sex,  "==")
samesex <- as.matrix(samesex)
diag(samesex) <- NA
samerace <- outer(fx_nodes$race, fx_nodes$race, "==")
samerace <- as.matrix(samerace)
diag(samerace) <- NA
diffgrade <- outer(fx_nodes$grade, fx_nodes$grade, "-")
diffgrade <- as.matrix(diffgrade)
diag(diffgrade) <- NA
diffgrade_abs <- abs(as.matrix(diffgrade))
adjmat <- as.matrix(fx_net)
diag(adjmat) <- NA
adj_lt <- adjmat[lower.tri(adjmat)]
both_white_lt <- both_white[lower.tri(both_white)]
samesex_lt <- samesex[lower.tri(samesex)]
samerace_lt <- samerace[lower.tri(samerace)]
diffgrade_lt <- diffgrade[lower.tri(diffgrade)]
dmat <- as.data.frame(cbind(c(adjmat), c(both_white), c(samesex), c(samerace), abs(c(diffgrade)), c(diffgrade)))
dmat_lt <- as.data.frame(cbind(c(adj_lt), c(both_white_lt), c(samesex_lt), c(samerace_lt), abs(c(diffgrade_lt)), c(diffgrade_lt)))
names(dmat) <- c("adjmat", "both_white", "samesex", "samerace", "diffgrade_abs", "diffgrade")
names(dmat_lt) <- c("adjmat", "both_white", "samesex", "samerace", "diffgrade_abs", "diffgrade")
m1 <- lm(adjmat ~ samesex + both_white + diffgrade_abs, data = dmat)
m1
sna::netlm(adjmat, list(samesex, both_white, diffgrade_abs), mode = "digraph", reps = 10) # same results as m1
flor <- netwrite(nodelist = florentine_nodes,
node_id = "id",
i_elements = florentine_edges$source,
j_elements = florentine_edges$target,
type = florentine_edges$type,
directed = FALSE,
net_name = "florentine_graph")
library(ideanet)
flor <- netwrite(nodelist = florentine_nodes,
node_id = "id",
i_elements = florentine_edges$source,
j_elements = florentine_edges$target,
type = florentine_edges$type,
directed = FALSE,
net_name = "florentine_graph")
flor_setup <- qap_setup(flor$florentine_graph,
variables = c("total_degree"),
methods = c("difference"))
net <- flor_setup$graph
variables = c("diff_total_degree")
dependent = NULL
directed = F
family = "linear"
reps = 500
tempvars <- c(dependent, variables)
tempvars
"igraph" %in% class(net)
iso <- which(igraph::degree(net) == 0)
iso
net <- igraph::delete_vertices(net, iso)
net
igraph::any_multiple(net) == T
net <- igraph::simplify(net, edge.attr.comb = "sum")
#set up the QAP on a simpler case.
library(statnet)
library(dplyr)
library(ideanet)
edges <- read_csv("/Users/gabe/Downloads/test_edges.csv")
edges <- dplyr::read_csv("/Users/gabe/Downloads/test_edges.csv")
edges <- read.csv("/Users/gabe/Downloads/test_edges.csv")
nodes <- read.csv("/Users/gabe/Downloads/test_nodes.csv")
?netwrite()
nodes
res <- netwrite(nodelist = nodes, node_id = "ego_nid", i_elements = edges$senderid, j_elements = edges$alterid,
weights = edges$value, type = edges$reltype)
res$network
qap_run(res$network, variables = c("grade"), directed = F, reps = 10)
res <- qap_setup(fx_net2, variables = c("grade"), methods = c("difference"), directed = F)
res <- qap_setup(res$network, variables = c("grade"), methods = c("difference"), directed = F)
res$network
qap_run(res$graph, variables = c("grade"), directed = F, reps = 10)
res$graph
qap_run(res$graph, variables = c("abs_diff_grade"), directed = F, reps = 10)
ideanetViz()
install.packages("tnet")
rm(list= setdiff(ls(), c("path")))
source(paste0(path, "/comparison_script.R"))
# IDEANET
library(devtools)
install_github("Tom-Wolff/ideanet", ref = "main")
# install_github("Tom-Wolff/ideanet", ref = 'dba42703cf1651c043f58f392c946ac449aec9bb')
library(ideanet)
library(dplyr)
# STANDALONES
library(igraph)
library(manynet)
# CHANGE PATH TO FOLDER
path <- "/Users/gabe/Dropbox/IDEANet/ideanet_measures"
rm(list= setdiff(ls(), c("path")))
source(paste0(path, "/comparison_script.R"))
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
comparison_f(data_type = "edgelist", edges = marvel, directed = F, weights = marvel$weight, netname = "marvel")
data_type = "edgelist"
edges = marvel
directed = F
weights = marvel$weight
netname = "marvel"
type = NULL
nodes = NULL
if (is.null(weights) & data_type == "edgelist") {edges$weights <- 1}
if (is.null(type) & data_type == "edgelist") {edges$type <- 1}
if ("attr" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = attr)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
# Create igraph objects
if (data_type == "edgelist") {
if (is.data.frame(nodes)) {net <- graph_from_data_frame(edges, vertices = nodes, directed = directed) # with nodes
} else {net <- graph_from_data_frame(edges, directed = directed)} # without nodes
}
if (data_type == "adjacency_matrix") {net <- graph_from_adjacency_matrix(edges)} # adjacency matrix
net
rm(list= setdiff(ls(), c("path")))
source(paste0(path, "/comparison_script.R"))
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
comparison_f(data_type = "edgelist", edges = marvel, directed = F, weights = marvel$weight, netname = "marvel")
data_type = "edgelist"
edges = fauxmesa_edges
rm(list= setdiff(ls(), c("path")))
source(paste0(path, "/comparison_script.R"))
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
comparison_f(data_type = "edgelist", edges = marvel, directed = F, weights = marvel$weight, netname = "marvel")
data_type = "edgelist"
edges = marvel
directed = F
weights = marvel$weight
netname = "marvel"
type = NULL
nodes = NULL
if (is.null(weights) & data_type == "edgelist") {edges$weights <- 1}
if (is.null(type) & data_type == "edgelist") {edges$type <- 1}
if ("attr" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = attr)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
# Create igraph objects
if (data_type == "edgelist") {
if (is.data.frame(nodes)) {net <- graph_from_data_frame(edges, vertices = nodes, directed = directed) # with nodes
} else {net <- graph_from_data_frame(edges, directed = directed)} # without nodes
}
if (data_type == "adjacency_matrix") {net <- graph_from_adjacency_matrix(edges)} # adjacency matrix
tnet::clustering_w(net)
library(tnet)
edges
tnet <- as.tnet(edges %>% select(-type))
unique_names <- unique(c(edges$from, edges$to))
name_to_id <- setNames(1:length(unique_names), unique_names)
name_to_id
edges$from_id <- name_to_id[edges$from]
edges$to_id <- name_to_id[edges$to]
View(edges)
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
data_type = "edgelist"
edges = marvel
directed = F
weights = marvel$weight
netname = "marvel"
unique_names <- unique(c(edges$from, edges$to))
name_to_id <- setNames(1:length(unique_names), unique_names)
edges$from <- name_to_id[edges$from]
edges$to <- name_to_id[edges$to]
edges
tnet <- as.tnet(edges %>% select(-type))
View(tnet)
rm(list= setdiff(ls(), c("path")))
source(paste0(path, "/comparison_script.R"))
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
comparison_f(data_type = "edgelist", edges = marvel, directed = F, weights = marvel$weight, netname = "marvel")
data_type = "edgelist"
edges = marvel
library(tnet)
unique_names <- unique(c(edges$from, edges$to))
name_to_id <- setNames(1:length(unique_names), unique_names)
edges$from <- name_to_id[edges$from]
edges$to <- name_to_id[edges$to]
tnet <- as.tnet(edges %>% select(-type))
unique_names <- unique(c(edges$from, edges$to))
name_to_id <- setNames(1:length(unique_names), unique_names)
edges$from <- name_to_id[edges$from]
edges$to <- name_to_id[edges$to]
tnet <- as.tnet(edges)
tnet::clustering_w(tnet)
tnet::betweenness_w(tnet, alpha = 1)
bet1 <- tnet::betweenness_w(tnet, alpha = 0.5)
bet1
bet1 <- tnet::betweenness_w(tnet)
bet1
write.csv(bet1, "bet_tnet.csv")
source(paste0(path, "/comparison_script.R"))
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
comparison_f(data_type = "edgelist", edges = marvel, directed = F, weights = marvel$weight, netname = "marvel")
cent1 <- tnet:closeness_w(tnet, alpha = 1)
cent1
tnet:closeness_w(tnet, alpha = 1)
rm(list= setdiff(ls(), c("path")))
source(paste0(path, "/comparison_script.R"))
data("marvel")
marvel <- marvel %>% rename(from = Source, to = Target, weight = Weight)
out <- netwrite(data_type = "edgelist", nodelist = unique(c(marvel$from, marvel$to)),
i_elements = marvel$from, j_elements = marvel$to, directed = F,
weights = marvel$weight, weight_type = "distance", type = NULL,
message = F)
node_measures <- out$node_measures
system_level_measures <- out$system_level_measures
comparison_f(data_type = "edgelist", edges = marvel, directed = F, weights = marvel$weight, netname = "marvel")
data_type = "edgelist"
edges = marvel
directed = F
weights = marvel$weight
netname = "marvel"
nodes = NULL
if (is.null(weights) & data_type == "edgelist") {edges$weights <- 1}
if (is.null(type) & data_type == "edgelist") {edges$type <- 1}
type = NULL
if (is.null(weights) & data_type == "edgelist") {edges$weights <- 1}
if (is.null(type) & data_type == "edgelist") {edges$type <- 1}
if ("attr" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = attr)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
if ("label" %in% names(node_measures)) {node_measures <- node_measures %>% rename(original_id = label)}
# Create igraph objects
if (data_type == "edgelist") {
if (is.data.frame(nodes)) {net <- graph_from_data_frame(edges, vertices = nodes, directed = directed) # with nodes
} else {net <- graph_from_data_frame(edges, directed = directed)} # without nodes
}
if (data_type == "adjacency_matrix") {net <- graph_from_adjacency_matrix(edges)} # adjacency matrix
## Node measures ##
# Always measured
V(net)$total_degree <- igraph::degree(net, mode='all', loops=FALSE)
V(net)$eigen_centrality <- igraph::eigen_centrality(net, directed = directed, weights = weights)$vector
V(net)$bonpow <- igraph::power_centrality(net, exponent = 0.75)
V(net)$bonpow_negative <- igraph::power_centrality(net, exponent = -0.75)
V(net)$betweenness <- igraph::centr_betw(net, directed = directed)$res
V(net)$burt_constraint <- igraph::constraint(net, weights = weights)
V(net)$burt_hierarchy <- as.vector(manynet::node_hierarchy(net))
V(net)$effective_size <- as.vector(manynet::node_effsize(net))
net
igraph::closeness(net, normalized = T)
igraph::closeness(as.undirected(net), normalized = T)
net
saveRDS(net, "net.rds")
igraph::closeness(net, normalized = T)
library(igraph)
library(readxl)
library(ggplot2)
setwd("/Users/gabe/Downloads")
#check:
getwd()
g <- read_graph(file.choose(), format = "marvel1.net")
g
getwd()
?read_graph
g <- read_graph("/Users/gabe/Downloads/marvel1.net", format = "pajek")
g
net
g <-as.undirected(g, mode = "collapse")
net
g
betweenness(g,normalize=T)
igraph::closeness(net, normalized = T)
1/E(net)$weight
E(net)$weight <- 1/E(net)$weight
igraph::closeness(net, normalized = T)
E(net)$weight <- 1/E(net)$weight
V(net)$closeness <- igraph::closeness(net, normalized = T)
closecent_g0<-closeness(g2,normalize=T)
g2<-g
E(g2)$weight<-(1/E(g2)$weight)
closecent_g0<-closeness(g2,normalize=T)
closecent_g0
as.data.frame(closecent_g0)
as.data.frame(V(net)$closeness)
as_data_frame(net, what = "nodes")
as_data_frame(net, what = "vertices")
as_data_frame(net, what = "vertices") %>% select(name, closeness)
df1 <- as.data.frame(closecent_g0)
df2 <- as_data_frame(net, what = "vertices") %>% select(name, closeness)
View(df1)
df1 <- as.data.frame(closecent_g0) %>% tibble::rownames_to_column(var = "name")
df1
left_join(df2, df1, by = c("name"))
View(df1)
df1 <- as.data.frame(closecent_g0) %>% tibble::rownames_to_column(var = "name")
View(df1)
df2 <- as_data_frame(net, what = "vertices") %>% select(name, closeness)
View(df2)
df1 <- as.data.frame(closecent_g0) %>% tibble::rownames_to_column(var = "name")
df2 <- as_data_frame(net, what = "vertices") %>% select(name, closeness)
rownames(df2) <- NULL
View(df1)
View(df2)
left_join(df2, df1, by = "name")
df1 %>% pull(name)
df2 %>% pull(name)
df1$name <- trimws(df1$name)
df1 %>% pull(name)
left_join(df2, df1, by = "name")
igraph::closeness(net, normalized = T)
E(net)$weight <- 1/E(net)$weight
igraph::closeness(net, normalized = T)
V(net)$closeness <- igraph::closeness(net, normalized = T)
df1 <- as.data.frame(closecent_g0) %>% tibble::rownames_to_column(var = "name")
df1$name <- trimws(df1$name)
df2 <- as_data_frame(net, what = "vertices") %>% select(name, closeness)
rownames(df2) <- NULL
left_join(df2, df1, by = "name")
View(node_measures)
net
g
igraph::closeness(g2,normalize=T)
View(node_measures)
df3 <- node_measures %>% select(original_id, closeness_ideanet = closeness)
View(df3)
df3 %>% pull(original_id)
df3 <- node_measures %>% select(name = original_id, closeness_ideanet = closeness)
final_df <- left_join(df2, df1, by = "name")
final_df <- left_join(final_df, df3, by = "name")
View(final_df)
g
net
igraph::closeness(g, normalized = T)
igraph::closeness(g2, normalized = T)
igraph::closeness(g, normalized = T)
igraph::closeness(g2, normalized = T)
igraph::closeness(net, normalized = T)
build()
devtools::build()
systemfonts::system_fonts() |> View()
devtools::build()
packageVersion("igraph")
