dplyr::rename(!!paste0(variable, "_alter") := variable)
# If method "reduced_category", create simple dichotomy
if (method == "reduced_category") {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("same_", variable))) :=
dplyr::case_when(!!sym(paste0(variable, "_alter")) ==
!!sym(paste0(variable, "_ego")) ~ 1,
is.na(!!sym(paste0(variable, "_ego"))) |
is.na(!!sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
# If method "multi_category", create an tidyselect::all_of(variable) for each value and then dichotomize.
if (method == "multi_category") {
opts <- nodes %>% dplyr::select(tidyselect::all_of(variable)) %>% dplyr::distinct() %>% tidyr::drop_na() %>% pull()
for (n in 1:length(opts)) {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("both_", variable, "_", opts[n]))) :=
dplyr::case_when((!!sym(paste0(variable, "_alter")) == opts[n]) &
(!!sym(paste0(variable, "_ego")) == opts[n]) ~ 1,
is.na(!!sym(paste0(variable, "_ego"))) |
is.na(!!sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
}
# If method "difference", take the difference between ego and alter
if (method == "difference") {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("diff_", variable))) :=
as.numeric(!!sym(paste0(variable, "_ego"))) -
as.numeric(!!sym(paste0(variable, "_alter"))))
}
# If diff is "both", run both reduced and multi categories.
if (method == "both") {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("same_", variable))) :=
dplyr::case_when(!!sym(paste0(variable, "_alter")) ==
!!sym(paste0(variable, "_ego")) ~ 1,
is.na(!!sym(paste0(variable, "_ego"))) |
is.na(!!sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
opts <- nodes %>% dplyr::select(tidyselect::all_of(variable)) %>% dplyr::distinct() %>% tidyr::drop_na() %>% pull()
for (n in 1:length(opts)) {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("both_", variable, "_", opts[n]))) :=
dplyr::case_when((!!sym(paste0(variable, "_alter")) == opts[n]) &
(!!sym(paste0(variable, "_ego")) == opts[n]) ~ 1,
is.na(!!sym(paste0(variable, "_ego"))) |
is.na(!!sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
}
}
}
qap_graph <- igraph::graph_from_data_frame(edges, directed = directed, vertices = nodes)
qap_results <<- list(qap_graph, nodes, edges)
}
detach("package:tidyverse", unload=TRUE)
detach("package:dplyr", unload=TRUE)
saveRDS(network, "test.rds")
net <- readRDS("/Users/gabe/test.rds")
net
View(net)
net
qap_setup <- function(net, variables, methods, directed = F, additional_vars = NULL) {
# require(sna)
# require(igraph)
# require(intergraph)
# require(tidygraph)
# require(dplyr)
### CONSTRUCTING NODE AND EDGE LISTS ###
# Make sure it's an igraph object
if ("network" %in% class(net)) {
net <- intergraph::asIgraph(net)
}
# Create nodelist, checking for an "id" column
if (!("id" %in% igraph::vertex_attr_names(net))) {
nodes <- igraph::as_data_frame(net, what = "vertices") %>%
tibble::rownames_to_column(var = "id") %>%
dplyr::mutate(id = as.numeric(id))
} else {
nodes <- igraph::as_data_frame(net, what = "vertices") %>%
dplyr::mutate(id = as.numeric(id))
}
# Create edgelist
edges <- igraph::as_data_frame(net, what = "edges") %>%
dplyr::mutate_at(vars(from, to), as.numeric)
# Check if additional_vars was called
if (!is.null(additional_vars)) {
vec1 <- nodes$id
# Check if the called ego df has an id column or a label column
tryCatch(vec2 <- additional_vars$id,
warning = function(e)
tryCatch(vec2 <- additional_vars$label,
warning = function(e)
stop("Make sure your additional ego dataframe contains an id or label variable")))
# Check if the two ids are identical
if (identical(vec1, vec2) == F) {
error_m <- paste0("Make sure the id or label of the additional ego dataframe match model ids exactly.
There are ", length(vec1), " ids in the model and ", length(vec2), " ids in the additional
dataframe, of which ", length(intersect(vec1, vec2)), " intersect.")
stop(error_m)
}
# Merge if all tests are passed
nodes <- nodes %>% dplyr::left_join(additional_vars)
}
### CONSTRUCTING DYAD MEASURES FROM EGO MEASURES ###
# check if there are as many variables as methods
if ((length(variables) == length(methods)) == F) {
stop("Different number of variables and methods")
}
# loop over user defined variables
for (i in 1:length(variables)) {
variable <- variables[i]
method <- methods[i]
# Check (1) if variable in in nodelist (2) if variable NOT in edgelist (3) if transformed variable in edgelist. If False, skip.
if (variable %in% names(nodes) & !(variable %in% names(edges)) & !(!!paste0(variable, "_ego") %in% names(edges))) {
# Add each value with _ego or _alter suffix to edge dataframe
edges <- edges %>%
dplyr::left_join(nodes %>% dplyr::select(id, tidyselect::all_of(variable)), by = c("from" = "id")) %>%
dplyr::rename(!!paste0(variable, "_ego") := variable) %>%
dplyr::left_join(nodes %>% dplyr::select(id, tidyselect::all_of(variable)), by = c("to" = "id")) %>%
dplyr::rename(!!paste0(variable, "_alter") := variable)
# If method "reduced_category", create simple dichotomy
if (method == "reduced_category") {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("same_", variable))) :=
dplyr::case_when(!!sym(paste0(variable, "_alter")) ==
!!sym(paste0(variable, "_ego")) ~ 1,
is.na(!!sym(paste0(variable, "_ego"))) |
is.na(!!sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
# If method "multi_category", create an tidyselect::all_of(variable) for each value and then dichotomize.
if (method == "multi_category") {
opts <- nodes %>% dplyr::select(tidyselect::all_of(variable)) %>% dplyr::distinct() %>% tidyr::drop_na() %>% pull()
for (n in 1:length(opts)) {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("both_", variable, "_", opts[n]))) :=
dplyr::case_when((!!sym(paste0(variable, "_alter")) == opts[n]) &
(!!sym(paste0(variable, "_ego")) == opts[n]) ~ 1,
is.na(!!sym(paste0(variable, "_ego"))) |
is.na(!!sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
}
# If method "difference", take the difference between ego and alter
if (method == "difference") {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("diff_", variable))) :=
as.numeric(!!sym(paste0(variable, "_ego"))) -
as.numeric(!!sym(paste0(variable, "_alter"))))
}
# If diff is "both", run both reduced and multi categories.
if (method == "both") {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("same_", variable))) :=
dplyr::case_when(!!sym(paste0(variable, "_alter")) ==
!!sym(paste0(variable, "_ego")) ~ 1,
is.na(!!sym(paste0(variable, "_ego"))) |
is.na(!!sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
opts <- nodes %>% dplyr::select(tidyselect::all_of(variable)) %>% dplyr::distinct() %>% tidyr::drop_na() %>% pull()
for (n in 1:length(opts)) {
edges <- edges %>%
dplyr::mutate(!!sym((paste0("both_", variable, "_", opts[n]))) :=
dplyr::case_when((!!sym(paste0(variable, "_alter")) == opts[n]) &
(!!sym(paste0(variable, "_ego")) == opts[n]) ~ 1,
is.na(!!sym(paste0(variable, "_ego"))) |
is.na(!!sym(paste0(variable, "_alter"))) ~ NA_real_, T ~ 0))
}
}
}
}
qap_graph <- igraph::graph_from_data_frame(edges, directed = directed, vertices = nodes)
qap_results <<- list(qap_graph, nodes, edges)
}
additional_vars = NULL
directed = T
c("reduced_category")
c("house_gender")
use_pipe()
usethis::use_pipe()
library(tidyverse)
df <- read_csv("/Users/gabe/Dropbox/IDEANet/Example Data/ahs_wpvar.csv")
df
??archive
df <- read_csv(archive::archive_read("/Users/gabe/Downloads/facebook.tar", file = 3),
col_types = cols())
install.packages("archive")
df <- read_csv(archive::archive_read("/Users/gabe/Downloads/facebook.tar", file = 3),
col_types = cols())
View(df)
df <- read_csv(archive::archive_read("/Users/gabe/Downloads/facebook.tar", file = 2),
col_types = cols())
df <- read_csv(archive::archive_read("/Users/gabe/Downloads/facebook.tar", file = 3),
col_types = cols())
utils::untar("/Users/gabe/Downloads/facebook.tar")
df <- utils::untar("/Users/gabe/Downloads/facebook.tar")
df <- utils::untar("/Users/gabe/Downloads/facebook.tar", exdir = "/Users/gabe/Downloads/out")
df <- read_csv(archive::archive_read("/Users/gabe/Downloads/facebook.tar", file = 3),
col_types = cols())
View(df)
df <- read_csv("/Users/gabe/Downloads/twitch_gamers/large_twitch_features.csv")
head(df)
df <- read_csv("/Users/gabe/Downloads/twitch_gamers//Users/gabe/Downloads/twitch_gamers/large_twitch_edges.csv")
df <- read_csv("/Users/gabe/Downloads/twitch_gamers/large_twitch_edges.csv")
head(df)
df <- read_csv("/Users/gabe/Downloads/soc-sign-bitcoinotc.csv")
head(df)
df <- read_tsv("/Users/gabe/Downloads/act-mooc/mooc_actions.tsv")
head(df)
df <- read_csv("/Users/gabe/Downloads/git_web_ml/musae_git_target.csv")
head(df)
df <- read_csv("/Users/gabe/Downloads/trumpworld-master/data/trumpworld.csv")
head(df)
View(df)
View(df)
distinct(df$`Entity A`)
unique(df$`Entity A`)
length(unique(df$`Entity A`))
View(df)
length(unique(df$Connection))
df <- read_csv("/Users/gabe/Downloads/Alaska-master/Wainwright.edges")
head(df)
df <- read_csv("/Users/gabe/Downloads/CSV/SWINGERS.csv")
View(df)
df <- read_csv("/Users/gabe/Documents/Projects/Bass Connections/project/code/networks/pastor_edgelist.csv")
library(tidyverse)
df <- read_csv("/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel-unimodal-nodes.csv")
edges <- read_csv("/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel-unimodal-edges.csv")
save(df, edges, file = "/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel.Rdata")
load("/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel.Rdata")
?read.csv
??netwrite
df
edges
df
ideanet::netwrite(data_type = "edgelist", i_elements = edges$Source, j_elements = edges$Target,
nodelist = df, node_id = "ID", weights = edges$Weight)
ideanet::netwrite(i_elements = edges$Source, j_elements = edges$Target,
nodelist = df, node_id = "ID", weights = edges$Weight)
ideanet::netwrite(i_elements = edges$Source, j_elements = edges$Target,
weights = edges$Weight)
View(edges)
View(edgelist)
View(node_measures)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev")
load("/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel.Rdata")
ideanet::netwrite(i_elements = edges$Source, j_elements = edges$Target,
weights = edges$Weight)
library(ideanet)
data(marvel)
data(marvel)
library(ideanet)
ideanet::marvel
df <- read_csv("/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel-unimodal-nodes.csv")
library(tidyverse)
df <- read_csv("/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel-unimodal-nodes.csv")
edges <- read_csv("/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel-unimodal-edges.csv")
# save(df, edges, file = "/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel.Rdata")
usethis::use_data(df, edges)
??use_data
edges <- read_csv("/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel-unimodal-edges.csv")
save(df, edges, file = "/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel.Rdata")
save(edges, file = "/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel.Rdata")
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev")
library(ideanet)
data(marvel, package = "ideanet")
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev")
setwd("/Users/gabe/Documents/Projects/IDEAnet/ideanet")
getwd()
library(tidyverse)
edges <- read_csv("/Users/gabe/Dropbox/IDEANet/Example Data/marvel/marvel-unimodal-edges.csv")
setwd("/Users/gabe/Documents/Projects/IDEAnet/ideanet")
usethis::use_data(edges)
marvel <- edges
usethis::use_data(marvel)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev")
ideanet::marvel
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev")
library(ideanet)
ideanet::marvel
ideanet::netwrite(i_elements = edges$Source, j_elements = edges$Target,
weights = edges$Weight)
library(ideanet)
ideanet::marvel
df <- ideanet::marvel
ideanet::netwrite(i_elements = df$Source, j_elements = df$Target,
weights = df$Weight)
ideanet::communities(network)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev")
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev", force = T)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev", force = T)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev", force = T)
devtools::install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev", force = T)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
shiny::runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
library(ideanet)
runApp('inst/apps/ideanetViz')
library(dplyr)
library(tidyverse)
library(ggplot2)
df <- read_csv("/Users/gabe/Downloads/test_in.csv")
length(unique(df$total_degree))
table(df$total_degree)
data.frame(table(df$total_degree))
dat
dat <- data.frame(table(df$total_degree))
dat
ggplot(dat, aes(x = Var1, y = Freq)) +
geom_col()
shiny::runApp('inst/apps/ideanetViz')
library(ideanet)
runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
runApp('inst/apps/ideanetViz')
library(ideanet)
vignette("ego_netwrite", package = "ideanet")
vignette(package = "ideanet")
tools::getVignetteInfo("ideanet")
nc_read("/Users/gabe/Downloads/networkCanvasExport-1713720198105-2 2")
res <- ideanet::nc_read("/Users/gabe/Downloads/networkCanvasExport-1713720198105-2 2")
res$egos
res$egos
res$egos %>% select(name, email)
res$egos dplyr::%>% select(name, email)
res$egos
res$egos["ego.name"]
res$egos[c("ego.name", "email")]
res <- ideanet::nc_read("/Users/gabe/Downloads/networkCanvasExport-1713720198105-2 2")
res$egos
res$egos[c("ego.name", "email")]
res <- res$egos[c("ego.name", "email")]
emails <- readxl::read_excel("/Users/gabe/Documents/Projects/Egonets_survey/advertising/emails.xlsx")
emails
library(dplyr)
emails
res$email
emails %>% mutate(Completed = case_when(Email %in% res$email ~ 1, T ~ NA_real_))
emails
emails %>%
mutate(Email = tolower(Email)) %>%
mutate(Completed = case_when(Email %in% res$email ~ 1, T ~ NA_real_))
res
res$email <- tolower(res$email)
emails %>%
mutate(Email = tolower(Email)) %>%
mutate(Completed = case_when(Email %in% res$email ~ 1, T ~ NA_real_))
emails <- emails %>%
mutate(Email = tolower(Email)) %>%
mutate(Completed = case_when(Email %in% res$email ~ 1, T ~ NA_real_))
write.csv(emails, "emails_comp.csv")
emails
res
emails
res %>% mutate(found = case_when(email %in% emails$Email))
res %>% mutate(found = case_when(email %in% emails$Email ~ 1, T ~ 0))
res %>% mutate(found = case_when(email %in% emails$Email ~ 1, T ~ 0)) %>% filter(found == 0)
library(statnet)
library(dplyr)
library(ideanet)
fx_edges <- ideanet::fauxmesa_edges
fx_nodes <- ideanet::fauxmesa_nodes %>% mutate(race_t = race)
el <- cbind(a=fx_edges$from, b=fx_edges$to)
fx_edges_mat <- matrix(0, nrow(fx_edges), nrow(fx_nodes))
fx_edges_mat[el] <- 1 # edgelist
fx_att_list <- as.list(fx_nodes)
fx_net <- network::network(x = fx_edges, directed = T,
vertex.attr = fx_nodes)
fx_net2 <- igraph::graph_from_data_frame(fx_edges, vertices = fx_nodes, directed = T)
unique_ids <- unique(c(unique(fx_edges$from), unique(fx_edges$to)))
fx_nodes <- fx_nodes %>% filter(id %in% unique_ids)
fx_nodes$both_race_white <- ifelse(fx_nodes$race == "White", 1, 0)
both_white <- outer(fx_nodes$both_race_white, fx_nodes$both_race_white,  "==")
both_white <- as.matrix(both_white)
samesex <- outer(fx_nodes$sex, fx_nodes$sex,  "==")
samesex <- as.matrix(samesex)
samerace <- outer(fx_nodes$race, fx_nodes$race, "==")
samerace <- as.matrix(samerace)
diffgrade <- outer(fx_nodes$grade, fx_nodes$grade, "-")
diffgrade <- as.matrix(diffgrade)
diffgrade_abs <- abs(as.matrix(diffgrade))
adjmat <- as.matrix(fx_net)
diag(fx_net)
fx_net
diag(adjmat)
diffgrade
samesex <- outer(fx_nodes$sex, fx_nodes$sex,  "==")
samesex <- as.matrix(samesex)
diag(samesex) <- NA
samerace <- outer(fx_nodes$race, fx_nodes$race, "==")
samerace <- as.matrix(samerace)
diag(samerace) <- NA
diffgrade <- outer(fx_nodes$grade, fx_nodes$grade, "-")
diffgrade <- as.matrix(diffgrade)
diag(diffgrade) <- NA
diffgrade_abs <- abs(as.matrix(diffgrade))
diag(adjmat) <- NA
adj_lt <- adjmat[lower.tri(adjmat)]
both_white_lt <- both_white[lower.tri(both_white)]
samesex_lt <- samesex[lower.tri(samesex)]
samerace_lt <- samerace[lower.tri(samerace)]
diffgrade_lt <- diffgrade[lower.tri(diffgrade)]
dmat <- as.data.frame(cbind(c(adjmat), c(both_white), c(samesex), c(samerace), abs(c(diffgrade)), c(diffgrade)))
fx_edges <- ideanet::fauxmesa_edges
fx_nodes <- ideanet::fauxmesa_nodes %>% mutate(race_t = race)
el <- cbind(a=fx_edges$from, b=fx_edges$to)
fx_edges_mat <- matrix(0, nrow(fx_edges), nrow(fx_nodes))
fx_edges_mat[el] <- 1 # edgelist
fx_att_list <- as.list(fx_nodes)
fx_net <- network::network(x = fx_edges, directed = T,
vertex.attr = fx_nodes)
fx_net2 <- igraph::graph_from_data_frame(fx_edges, vertices = fx_nodes, directed = T)
unique_ids <- unique(c(unique(fx_edges$from), unique(fx_edges$to)))
fx_nodes <- fx_nodes %>% filter(id %in% unique_ids)
fx_nodes$both_race_white <- ifelse(fx_nodes$race == "White", 1, 0)
both_white <- outer(fx_nodes$both_race_white, fx_nodes$both_race_white,  "==")
both_white <- as.matrix(both_white)
diag(both_white) <- NA
samesex <- outer(fx_nodes$sex, fx_nodes$sex,  "==")
samesex <- as.matrix(samesex)
diag(samesex) <- NA
samerace <- outer(fx_nodes$race, fx_nodes$race, "==")
samerace <- as.matrix(samerace)
diag(samerace) <- NA
diffgrade <- outer(fx_nodes$grade, fx_nodes$grade, "-")
diffgrade <- as.matrix(diffgrade)
diag(diffgrade) <- NA
diffgrade_abs <- abs(as.matrix(diffgrade))
adjmat <- as.matrix(fx_net)
diag(adjmat) <- NA
adj_lt <- adjmat[lower.tri(adjmat)]
both_white_lt <- both_white[lower.tri(both_white)]
samesex_lt <- samesex[lower.tri(samesex)]
samerace_lt <- samerace[lower.tri(samerace)]
diffgrade_lt <- diffgrade[lower.tri(diffgrade)]
dmat <- as.data.frame(cbind(c(adjmat), c(both_white), c(samesex), c(samerace), abs(c(diffgrade)), c(diffgrade)))
dmat_lt <- as.data.frame(cbind(c(adj_lt), c(both_white_lt), c(samesex_lt), c(samerace_lt), abs(c(diffgrade_lt)), c(diffgrade_lt)))
names(dmat) <- c("adjmat", "both_white", "samesex", "samerace", "diffgrade_abs", "diffgrade")
names(dmat_lt) <- c("adjmat", "both_white", "samesex", "samerace", "diffgrade_abs", "diffgrade")
m1 <- lm(adjmat ~ samesex + both_white + diffgrade_abs, data = dmat)
m1
sna::netlm(adjmat, list(samesex, both_white, diffgrade_abs), mode = "digraph", reps = 10) # same results as m1
flor <- netwrite(nodelist = florentine_nodes,
node_id = "id",
i_elements = florentine_edges$source,
j_elements = florentine_edges$target,
type = florentine_edges$type,
directed = FALSE,
net_name = "florentine_graph")
library(ideanet)
flor <- netwrite(nodelist = florentine_nodes,
node_id = "id",
i_elements = florentine_edges$source,
j_elements = florentine_edges$target,
type = florentine_edges$type,
directed = FALSE,
net_name = "florentine_graph")
flor_setup <- qap_setup(flor$florentine_graph,
variables = c("total_degree"),
methods = c("difference"))
net <- flor_setup$graph
variables = c("diff_total_degree")
dependent = NULL
directed = F
family = "linear"
reps = 500
tempvars <- c(dependent, variables)
tempvars
"igraph" %in% class(net)
iso <- which(igraph::degree(net) == 0)
iso
net <- igraph::delete_vertices(net, iso)
net
igraph::any_multiple(net) == T
net <- igraph::simplify(net, edge.attr.comb = "sum")
#set up the QAP on a simpler case.
library(statnet)
library(dplyr)
library(ideanet)
edges <- read_csv("/Users/gabe/Downloads/test_edges.csv")
edges <- dplyr::read_csv("/Users/gabe/Downloads/test_edges.csv")
edges <- read.csv("/Users/gabe/Downloads/test_edges.csv")
nodes <- read.csv("/Users/gabe/Downloads/test_nodes.csv")
?netwrite()
nodes
res <- netwrite(nodelist = nodes, node_id = "ego_nid", i_elements = edges$senderid, j_elements = edges$alterid,
weights = edges$value, type = edges$reltype)
res$network
qap_run(res$network, variables = c("grade"), directed = F, reps = 10)
res <- qap_setup(fx_net2, variables = c("grade"), methods = c("difference"), directed = F)
res <- qap_setup(res$network, variables = c("grade"), methods = c("difference"), directed = F)
res$network
qap_run(res$graph, variables = c("grade"), directed = F, reps = 10)
res$graph
qap_run(res$graph, variables = c("abs_diff_grade"), directed = F, reps = 10)
ideanetViz()
shiny::runApp('inst/apps/ideanetViz')
install.packages(ideanet)
install.packages('ideanet')
install.packages("ideanet")
shiny::runApp('inst/apps/ideanetViz')
shiny::runApp('inst/apps/ideanetViz')
library(ideanet)
runApp('inst/apps/ideanetViz')
runApp('~/Downloads')
runApp('~/Downloads')
runApp('inst/apps/ideanetViz')
runApp('~/Downloads')
runApp('~/Downloads')
runApp('inst/apps/ideanetViz')
View(largest_bi_component)
View(summaries)
runApp('inst/apps/ideanetViz')
